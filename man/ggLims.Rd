% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggLims.R
\name{ggLims}
\alias{ggLims}
\alias{ggLims.gg}
\alias{ggLims.numeric}
\alias{get_ggLims}
\alias{set_ggLims}
\title{[!] Convenience functions to get and set the axis limits in ggplot2 object}
\usage{
ggLims(obj, axis = "y", ...)

\method{ggLims}{gg}(obj, axis = "y", ...)

\method{ggLims}{numeric}(obj, axis = "y", ...)

get_ggLims(obj, axis = "y", ...)

set_ggLims(obj, axis = "y", ..., expand = TRUE)
}
\arguments{
\item{obj}{Eithar a ggplot object (for getting the limits) or a numeric
vector with limits (for setting the limits).
 If values of limits: either vector of \bold{2 values} (min and max)
 for axis indicated in \code{axis} or vector of \bold{4 values}
(x min, x max, y min, y max) to be passed to function
\code{\link[ggplot2]{coord_cartesian}}.
\emph{NOTE}, that this function \code{ggLims} behaves differently
than \code{\link[ggplot2]{lims}}.}

\item{axis}{(A string) either "x", "y" (default) or "xy" axis
indicates axis if inerest.\cr
In case of "set_ggLims" following inputs are also possible if a list
should be returned: "xy_" or "xy_list".}

\item{...}{For generic use.}

\item{expand}{If \code{TRUE}, the default, adds a small expansion factor to
the limits to ensure that data and axes don't overlap. If \code{FALSE},
limits are taken exactly from the data or \code{xlim}/\code{ylim}.}
}
\value{
One of the following depending on inputs: \cr
a) vector of ranges of \emph{one} axis as
\code{(min, max)}, or \emph{both} axes as
\code{(x_min, x_max, y_min, y_max)},
b) list of limits for both axes as
 \code{list(x = (x_min, x_max), y = (y_min, y_max)}\cr
c) updated ggplot object
}
\description{
[!] Convenience functions to get and set the axis limits in ggplot2 object
}
\details{
\code{get_ggLims(obj, "y")} is a wrapper for \cr
\code{ggplot_build(obj)$panel$ranges[[1]]$y.range} \cr\cr

\code{set_ggLims(value, "y")} is a wrapper for \cr
\code{coord_cartesian(ylim = value)}
}
\examples{

library(ggplot2)
library(spPlot)

obj <- qplot(mpg, wt, data = mtcars, geom = c("line","point"))

# Get y axis limits ==========================
get_ggLims(obj)
ggLims(obj)
ggLims(obj, "y")

ggLims(obj, "x")
ggLims(obj, "xy")  # return as a vector
ggLims(obj, "xy_") # return as a list


\donttest{
\dontrun{

# Set y  .axis limits ==========================

# Original plot:
obj

# Settim limmits this way:
obj + ggLims(c(0, 5))

# is the same as doing it this way:
obj + ggLims(c(0, 5),"y")

# and this way:
obj + coord_cartesian(ylim = c(0, 5))

# BUT differs from this way, where some lines are trimmed:
obj + ylim(c(0, 5))

}}

}
\seealso{
\code{\link[ggplot2]{lims}}

Other \pkg{spPlot} functions for spectroscopy and \pkg{hyperSpec}: 
\code{\link{facet_wl}()},
\code{\link{gg_palette}()},
\code{\link{ggplot.hyperSpec}()},
\code{\link{label_expr2text}()}

Other \pkg{spPlot} functions for \pkg{ggplot2}: 
\code{\link{facet_wl}()},
\code{\link{gg_palette}()},
\code{\link{ggplot.hyperSpec}()},
\code{\link{nTick}}
}
\author{
Vilmantas Gegzna
}
\concept{\pkg{spPlot} functions for \pkg{ggplot2}}
\concept{\pkg{spPlot} functions for spectroscopy and \pkg{hyperSpec}}
